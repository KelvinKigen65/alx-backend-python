#!/bin/bash

# Blue-Green Deployment Script for Messaging App
# Usage: ./kubctl-0x02 [deploy-blue|deploy-green|switch-to-green|switch-to-blue|rollback|status]

set -e

# Check cluster connectivity before proceeding
check_cluster_connection() {
    print_status "Checking Kubernetes cluster connectivity..."
    
    if ! kubectl cluster-info >/dev/null 2>&1; then
        print_error "Cannot connect to Kubernetes cluster!"
        print_status "Troubleshooting steps:"
        echo "1. Check if Minikube is running: minikube status"
        echo "2. Start Minikube if stopped: minikube start"
        echo "3. Check kubectl context: kubectl config current-context"
        echo "4. Reset kubectl config: kubectl config use-context minikube"
        echo "5. If still failing, try: minikube delete && minikube start"
        exit 1
    fi
    
    print_success "Kubernetes cluster is accessible"
}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
NAMESPACE="default"
APP_NAME="messaging-app"
BLUE_DEPLOYMENT="${APP_NAME}-blue"
GREEN_DEPLOYMENT="${APP_NAME}-green"
SERVICE_NAME="${APP_NAME}-service"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if deployment is ready
wait_for_deployment() {
    local deployment_name=$1
    local timeout=${2:-300}
    
    print_status "Waiting for deployment $deployment_name to be ready..."
    
    # Show current pod status for debugging
    print_status "Current pod status:"
    kubectl get pods -n $NAMESPACE -l app=$APP_NAME,version=${deployment_name##*-} -o wide || true
    
    if kubectl wait --for=condition=available --timeout=${timeout}s deployment/$deployment_name -n $NAMESPACE; then
        print_success "Deployment $deployment_name is ready"
        return 0
    else
        print_error "Deployment $deployment_name failed to become ready within $timeout seconds"
        
        # Show detailed pod information for debugging
        print_status "Pod details for debugging:"
        kubectl get pods -n $NAMESPACE -l app=$APP_NAME,version=${deployment_name##*-} -o wide
        
        print_status "Pod descriptions:"
        local pods=$(kubectl get pods -n $NAMESPACE -l app=$APP_NAME,version=${deployment_name##*-} -o jsonpath='{.items[*].metadata.name}')
        for pod in $pods; do
            echo "=== Pod: $pod ==="
            kubectl describe pod $pod -n $NAMESPACE
            echo "=== Logs for $pod ==="
            kubectl logs $pod -n $NAMESPACE --tail=20 || true
            echo ""
        done
        
        return 1
    fi
}

# Function to check pod logs for errors
check_deployment_logs() {
    local deployment_name=$1
    local lines=${2:-50}
    
    print_status "Checking logs for deployment $deployment_name..."
    
    # Get pods for the deployment
    local pods=$(kubectl get pods -n $NAMESPACE -l app=$APP_NAME,version=${deployment_name##*-} -o jsonpath='{.items[*].metadata.name}')
    
    if [ -z "$pods" ]; then
        print_warning "No pods found for deployment $deployment_name"
        return 1
    fi
    
    local error_found=false
    for pod in $pods; do
        print_status "Checking logs for pod: $pod"
        
        # Check for common error patterns
        local error_logs=$(kubectl logs $pod -n $NAMESPACE --tail=$lines | grep -i "error\|exception\|failed\|traceback" || true)
        
        if [ ! -z "$error_logs" ]; then
            print_error "Errors found in pod $pod:"
            echo "$error_logs"
            error_found=true
        else
            print_success "No errors found in pod $pod"
        fi
    done
    
    if [ "$error_found" = true ]; then
        return 1
    else
        return 0
    fi
}

# Function to test deployment health
test_deployment_health() {
    local version=$1
    local service_name="${APP_NAME}-${version}-internal"
    
    print_status "Testing health of $version deployment..."
    
    # Get the service port
    local service_port=$(kubectl get service $service_name -n $NAMESPACE -o jsonpath='{.spec.ports[0].port}')
    
    # Port forward to test the service
    kubectl port-forward service/$service_name 8080:$service_port -n $NAMESPACE &
    local port_forward_pid=$!
    
    # Wait a moment for port forward to establish
    sleep 5
    
    # Test health endpoint (using root path since we're using nginx)
    local health_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/ || echo "000")
    
    # Kill port forward
    kill $port_forward_pid 2>/dev/null || true
    wait $port_forward_pid 2>/dev/null || true
    
    if [ "$health_status" = "200" ]; then
        print_success "$version deployment health check passed"
        return 0
    else
        print_error "$version deployment health check failed (HTTP $health_status)"
        return 1
    fi
}

# Function to switch traffic
switch_traffic() {
    local target_version=$1
    
    print_status "Switching traffic to $target_version version..."
    
    kubectl patch service $SERVICE_NAME -n $NAMESPACE -p '{"spec":{"selector":{"version":"'$target_version'"}}}'
    
    if [ $? -eq 0 ]; then
        print_success "Traffic switched to $target_version version"
    else
        print_error "Failed to switch traffic to $target_version version"
        return 1
    fi
}

# Function to deploy blue version
deploy_blue() {
    check_cluster_connection
    print_status "Deploying blue version..."
    
    # Apply with validation disabled if needed
    print_status "Applying blue deployment configuration..."
    if ! kubectl apply -f blue_deployment.yaml -n $NAMESPACE; then
        print_warning "Deployment failed with validation. Retrying with validation disabled..."
        kubectl apply -f blue_deployment.yaml -n $NAMESPACE --validate=false
    fi
    
    print_status "Applying service configuration..."
    if ! kubectl apply -f kubeservice.yaml -n $NAMESPACE; then
        print_warning "Service deployment failed with validation. Retrying with validation disabled..."
        kubectl apply -f kubeservice.yaml -n $NAMESPACE --validate=false
    fi
    
    if wait_for_deployment $BLUE_DEPLOYMENT; then
        if check_deployment_logs $BLUE_DEPLOYMENT; then
            print_success "Blue deployment completed successfully"
        else
            print_warning "Blue deployment completed but errors found in logs"
        fi
    else
        print_error "Blue deployment failed"
        return 1
    fi
}

# Function to deploy green version
deploy_green() {
    check_cluster_connection
    print_status "Deploying green version..."
    
    # Apply with validation disabled if needed
    if ! kubectl apply -f green_deployment.yaml -n $NAMESPACE; then
        print_warning "Green deployment failed with validation. Retrying with validation disabled..."
        kubectl apply -f green_deployment.yaml -n $NAMESPACE --validate=false
    fi
    
    if wait_for_deployment $GREEN_DEPLOYMENT; then
        if check_deployment_logs $GREEN_DEPLOYMENT; then
            if test_deployment_health "green"; then
                print_success "Green deployment completed successfully and is healthy"
            else
                print_warning "Green deployment completed but health check failed"
                return 1
            fi
        else
            print_warning "Green deployment completed but errors found in logs"
            return 1
        fi
    else
        print_error "Green deployment failed"
        return 1
    fi
}

# Function to show deployment status
show_status() {
    print_status "Current deployment status:"
    
    echo "Deployments:"
    kubectl get deployments -n $NAMESPACE -l app=$APP_NAME
    
    echo -e "\nPods:"
    kubectl get pods -n $NAMESPACE -l app=$APP_NAME
    
    echo -e "\nServices:"
    kubectl get services -n $NAMESPACE -l app=$APP_NAME
    
    echo -e "\nCurrent traffic routing:"
    local current_version=$(kubectl get service $SERVICE_NAME -n $NAMESPACE -o jsonpath='{.spec.selector.version}')
    print_status "Traffic is currently routed to: $current_version"
}

# Function to rollback (switch back to blue)
rollback() {
    print_warning "Rolling back to blue version..."
    switch_traffic "blue"
    print_success "Rollback completed"
}

# Main script logic
case "${1:-}" in
    "deploy-blue")
        deploy_blue
        ;;
    "deploy-green")
        deploy_green
        ;;
    "switch-to-green")
        if kubectl get deployment $GREEN_DEPLOYMENT -n $NAMESPACE >/dev/null 2>&1; then
            switch_traffic "green"
        else
            print_error "Green deployment not found. Deploy green version first."
            exit 1
        fi
        ;;
    "switch-to-blue")
        switch_traffic "blue"
        ;;
    "rollback")
        rollback
        ;;
    "status")
        show_status
        ;;
    "debug")
        print_status "Debugging current deployment issues..."
        
        echo "=== Deployments ==="
        kubectl get deployments -n $NAMESPACE -l app=$APP_NAME -o wide
        
        echo -e "\n=== Pods ==="
        kubectl get pods -n $NAMESPACE -l app=$APP_NAME -o wide
        
        echo -e "\n=== Events ==="
        kubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' | tail -20
        
        # Check individual pods
        local pods=$(kubectl get pods -n $NAMESPACE -l app=$APP_NAME -o jsonpath='{.items[*].metadata.name}')
        for pod in $pods; do
            echo -e "\n=== Describing Pod: $pod ==="
            kubectl describe pod $pod -n $NAMESPACE
            
            echo -e "\n=== Logs for Pod: $pod ==="
            kubectl logs $pod -n $NAMESPACE --tail=30 || echo "No logs available"
        done
        ;;
    "cleanup")
        print_warning "Cleaning up all messaging-app resources..."
        kubectl delete deployment,service,configmap,secret -n $NAMESPACE -l app=$APP_NAME --ignore-not-found=true
        print_success "Cleanup completed"
        ;;
    "")
        echo "Usage: $0 [deploy-blue|deploy-green|switch-to-green|switch-to-blue|rollback|status|debug|cleanup]"
        echo ""
        echo "Commands:"
        echo "  deploy-blue      - Deploy the blue version"
        echo "  deploy-green     - Deploy the green version alongside blue"
        echo "  switch-to-green  - Switch traffic from blue to green"
        echo "  switch-to-blue   - Switch traffic from green to blue"
        echo "  rollback         - Rollback to blue version"
        echo "  status           - Show current deployment status"
        echo "  debug            - Show detailed debugging information"
        echo "  cleanup          - Remove all messaging-app resources"
        echo ""
        echo "Blue-Green Deployment Workflow:"
        echo "1. ./kubctl-0x02 deploy-blue"
        echo "2. ./kubctl-0x02 deploy-green"
        echo "3. ./kubctl-0x02 switch-to-green"
        echo "4. ./kubctl-0x02 rollback (if needed)"
        ;;
    *)
        print_error "Unknown command: $1"
        echo "Use '$0' without arguments to see usage information."
        exit 1
        ;;
esac