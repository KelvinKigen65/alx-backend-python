#!/bin/bash

# kubctl-0x01 - Kubernetes Application Scaling Script
# This script scales a Django app deployment and performs load testing

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DEPLOYMENT_NAME="django-messaging-app"
TARGET_REPLICAS=3
LOAD_TEST_DURATION="30s"
LOAD_TEST_CONNECTIONS=10
LOAD_TEST_THREADS=2
APP_URL="http://localhost:8080"

echo -e "${BLUE}=== Kubernetes Application Scaling Script ===${NC}"
echo "Deployment: $DEPLOYMENT_NAME"
echo "Target Replicas: $TARGET_REPLICAS"
echo ""

# Function to print section headers
print_section() {
    echo -e "${YELLOW}=== $1 ===${NC}"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check prerequisites
print_section "Checking Prerequisites"
if ! command_exists kubectl; then
    echo -e "${RED}Error: kubectl is not installed${NC}"
    exit 1
fi

if ! command_exists wrk; then
    echo -e "${YELLOW}Warning: wrk is not installed. Installing...${NC}"
    echo "Please install wrk manually:"
    echo "Ubuntu/Debian: sudo apt-get install wrk"
    echo "macOS: brew install wrk"
    echo "Or build from source: https://github.com/wg/wrk"
    exit 1
fi

echo -e "${GREEN}✓ Prerequisites checked${NC}"
echo ""

# Step 1: Scale the deployment
print_section "Step 1: Scaling Deployment"
echo "Current deployment status:"
kubectl get deployment $DEPLOYMENT_NAME

echo ""
echo "Scaling deployment to $TARGET_REPLICAS replicas..."
kubectl scale deployment $DEPLOYMENT_NAME --replicas=$TARGET_REPLICAS

echo -e "${GREEN}✓ Scaling command executed${NC}"
echo ""

# Step 2: Wait for pods to be ready and verify
print_section "Step 2: Verifying Pod Status"
echo "Waiting for pods to be ready..."
kubectl wait --for=condition=ready pod -l app=$DEPLOYMENT_NAME --timeout=300s

echo ""
echo "Current pod status:"
kubectl get pods -l app=$DEPLOYMENT_NAME

echo ""
echo "Deployment status after scaling:"
kubectl get deployment $DEPLOYMENT_NAME

echo -e "${GREEN}✓ All pods are running${NC}"
echo ""

# Step 3: Resource monitoring before load test
print_section "Step 3: Resource Usage Before Load Test"
echo "Node resource usage:"
kubectl top nodes 2>/dev/null || echo "Metrics server not available or not ready"

echo ""
echo "Pod resource usage:"
kubectl top pods -l app=$DEPLOYMENT_NAME 2>/dev/null || echo "Metrics server not available or not ready"
echo ""

# Step 4: Setup port forwarding for load testing
print_section "Step 4: Setting Up Port Forwarding"
echo "Setting up port forwarding for load testing..."
kubectl port-forward deployment/$DEPLOYMENT_NAME 8080:8000 &
PORT_FORWARD_PID=$!

# Wait a moment for port forwarding to establish
sleep 5

# Test if the app is accessible
echo "Testing app accessibility..."
if curl -s -o /dev/null -w "%{http_code}" $APP_URL | grep -q "200\|404\|500"; then
    echo -e "${GREEN}✓ App is accessible at $APP_URL${NC}"
else
    echo -e "${YELLOW}Warning: App may not be fully ready, proceeding with load test anyway${NC}"
fi
echo ""

# Step 5: Perform load testing
print_section "Step 5: Load Testing with wrk"
echo "Starting load test..."
echo "Duration: $LOAD_TEST_DURATION"
echo "Connections: $LOAD_TEST_CONNECTIONS"
echo "Threads: $LOAD_TEST_THREADS"
echo "URL: $APP_URL"
echo ""

wrk -t$LOAD_TEST_THREADS -c$LOAD_TEST_CONNECTIONS -d$LOAD_TEST_DURATION $APP_URL

echo ""
echo -e "${GREEN}✓ Load test completed${NC}"
echo ""

# Step 6: Monitor resource usage during/after load test
print_section "Step 6: Resource Usage After Load Test"
echo "Node resource usage:"
kubectl top nodes 2>/dev/null || echo "Metrics server not available or not ready"

echo ""
echo "Pod resource usage:"
kubectl top pods -l app=$DEPLOYMENT_NAME 2>/dev/null || echo "Metrics server not available or not ready"

echo ""
echo "Pod distribution across nodes:"
kubectl get pods -l app=$DEPLOYMENT_NAME -o wide

echo ""

# Step 7: Cleanup
print_section "Step 7: Cleanup"
echo "Stopping port forwarding..."
kill $PORT_FORWARD_PID 2>/dev/null || true

echo ""
echo -e "${GREEN}=== Script Completed Successfully ===${NC}"
echo ""
echo "Summary:"
echo "- Scaled deployment '$DEPLOYMENT_NAME' to $TARGET_REPLICAS replicas"
echo "- Verified all pods are running"
echo "- Performed load testing with wrk"
echo "- Monitored resource usage"
echo ""
echo "To scale back down, run:"
echo "kubectl scale deployment $DEPLOYMENT_NAME --replicas=1"
echo ""
echo "To view logs from all pods:"
echo "kubectl logs -l app=$DEPLOYMENT_NAME --tail=10"