#!/bin/bash

# kubectl-0x02: Blue-Green Deployment Script for Django App
# This script performs zero-downtime deployments using blue-green strategy

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
NAMESPACE="default"
APP_NAME="django-app"
HEALTH_CHECK_PATH="/health/"
READY_CHECK_PATH="/ready/"
TIMEOUT=300  # 5 minutes timeout

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if deployment is ready
check_deployment_ready() {
    local deployment_name=$1
    local timeout=$2
    
    print_status "Waiting for deployment $deployment_name to be ready..."
    
    if kubectl wait --for=condition=available deployment/$deployment_name --timeout=${timeout}s -n $NAMESPACE; then
        print_success "Deployment $deployment_name is ready"
        return 0
    else
        print_error "Deployment $deployment_name failed to become ready within ${timeout}s"
        return 1
    fi
}

# Function to check logs for errors
check_logs_for_errors() {
    local deployment_name=$1
    local lines=${2:-50}
    
    print_status "Checking logs for $deployment_name..."
    
    # Get pod names for the deployment
    pods=$(kubectl get pods -l app=${APP_NAME},version=${deployment_name##*-} -n $NAMESPACE -o jsonpath='{.items[*].metadata.name}')
    
    if [ -z "$pods" ]; then
        print_warning "No pods found for deployment $deployment_name"
        return 1
    fi
    
    for pod in $pods; do
        print_status "Checking logs for pod: $pod"
        
        # Check for common error patterns
        error_count=$(kubectl logs $pod -n $NAMESPACE --tail=$lines | grep -i "error\|exception\|fail\|critical" | wc -l)
        
        if [ $error_count -gt 0 ]; then
            print_error "Found $error_count potential errors in pod $pod:"
            kubectl logs $pod -n $NAMESPACE --tail=$lines | grep -i "error\|exception\|fail\|critical" | head -10
            return 1
        else
            print_success "No errors found in pod $pod"
        fi
    done
    
    return 0
}

# Function to switch traffic
switch_traffic() {
    local target_version=$1
    
    print_status "Switching traffic to $target_version version..."
    
    # Update main service selector
    kubectl patch service django-app-service -n $NAMESPACE -p '{"spec":{"selector":{"version":"'$target_version'"}}}'
    
    # Update external service selector
    kubectl patch service django-app-external -n $NAMESPACE -p '{"spec":{"selector":{"version":"'$target_version'"}}}'
    
    print_success "Traffic switched to $target_version version"
}

# Function to get current active version
get_current_version() {
    kubectl get service django-app-service -n $NAMESPACE -o jsonpath='{.spec.selector.version}' 2>/dev/null || echo "blue"
}

# Function to perform health check
health_check() {
    local service_name=$1
    local retries=10
    local wait_time=5
    
    print_status "Performing health check on $service_name..."
    
    for i in $(seq 1 $retries); do
        # Port forward to test the service
        kubectl port-forward service/$service_name 8080:80 -n $NAMESPACE &
        PF_PID=$!
        sleep 2
        
        if curl -f http://localhost:8080$HEALTH_CHECK_PATH >/dev/null 2>&1; then
            kill $PF_PID 2>/dev/null || true
            print_success "Health check passed for $service_name"
            return 0
        else
            kill $PF_PID 2>/dev/null || true
            print_warning "Health check failed (attempt $i/$retries), retrying in ${wait_time}s..."
            sleep $wait_time
        fi
    done
    
    print_error "Health check failed for $service_name after $retries attempts"
    return 1
}

# Function to rollback
rollback() {
    local previous_version=$1
    print_warning "Rolling back to $previous_version version..."
    switch_traffic $previous_version
    print_success "Rollback completed"
}

# Main deployment function
deploy() {
    local target_version=$1
    
    if [ "$target_version" != "blue" ] && [ "$target_version" != "green" ]; then
        print_error "Invalid version. Use 'blue' or 'green'"
        exit 1
    fi
    
    current_version=$(get_current_version)
    print_status "Current active version: $current_version"
    print_status "Deploying to: $target_version"
    
    # Step 1: Deploy the target version
    print_status "Step 1: Deploying $target_version version..."
    kubectl apply -f ${target_version}_deployment.yaml -n $NAMESPACE
    
    # Step 2: Wait for deployment to be ready
    print_status "Step 2: Waiting for $target_version deployment to be ready..."
    if ! check_deployment_ready "${APP_NAME}-${target_version}" $TIMEOUT; then
        print_error "Deployment failed"
        exit 1
    fi
    
    # Step 3: Check logs for errors
    print_status "Step 3: Checking logs for errors..."
    if ! check_logs_for_errors "${APP_NAME}-${target_version}"; then
        print_error "Errors found in logs, aborting deployment"
        exit 1
    fi
    
    # Step 4: Perform health check on the new version
    print_status "Step 4: Performing health check..."
    if ! health_check "${APP_NAME}-${target_version}-service"; then
        print_error "Health check failed, aborting deployment"
        exit 1
    fi
    
    # Step 5: Switch traffic
    print_status "Step 5: Switching traffic to $target_version..."
    switch_traffic $target_version
    
    # Step 6: Final verification
    print_status "Step 6: Final verification..."
    sleep 10
    if health_check "${APP_NAME}-service"; then
        print_success "Deployment completed successfully!"
        print_status "Active version: $target_version"
    else
        print_error "Final health check failed, rolling back..."
        rollback $current_version
        exit 1
    fi
}

# Function to show status
show_status() {
    print_status "=== Django App Deployment Status ==="
    
    current_version=$(get_current_version)
    print_status "Current active version: $current_version"
    
    echo
    print_status "=== Deployments ==="
    kubectl get deployments -l app=$APP_NAME -n $NAMESPACE
    
    echo
    print_status "=== Pods ==="
    kubectl get pods -l app=$APP_NAME -n $NAMESPACE
    
    echo
    print_status "=== Services ==="
    kubectl get services -l app=$APP_NAME -n $NAMESPACE
}

# Function to setup initial environment
setup() {
    print_status "Setting up blue-green deployment environment..."
    
    # Apply services first
    kubectl apply -f kubeservice.yaml -n $NAMESPACE
    
    # Deploy blue version (initial)
    kubectl apply -f blue_deployment.yaml -n $NAMESPACE
    
    # Wait for blue deployment
    check_deployment_ready "${APP_NAME}-blue" $TIMEOUT
    
    print_success "Initial setup completed with blue version active"
}

# Function to cleanup
cleanup() {
    local version_to_remove=$1
    
    if [ -z "$version_to_remove" ]; then
        print_error "Please specify version to cleanup (blue or green)"
        exit 1
    fi
    
    current_version=$(get_current_version)
    
    if [ "$version_to_remove" == "$current_version" ]; then
        print_error "Cannot cleanup the currently active version ($current_version)"
        exit 1
    fi
    
    print_status "Cleaning up $version_to_remove version..."
    kubectl delete deployment "${APP_NAME}-${version_to_remove}" -n $NAMESPACE --ignore-not-found=true
    print_success "Cleanup completed for $version_to_remove version"
}

# Main script logic
case "${1:-}" in
    "setup")
        setup
        ;;
    "deploy")
        if [ -z "$2" ]; then
            print_error "Please specify version to deploy (blue or green)"
            exit 1
        fi
        deploy $2
        ;;
    "status")
        show_status
        ;;
    "switch")
        if [ -z "$2" ]; then
            print_error "Please specify version to switch to (blue or green)"
            exit 1
        fi
        switch_traffic $2
        ;;
    "rollback")
        current_version=$(get_current_version)
        if [ "$current_version" == "blue" ]; then
            rollback "green"
        else
            rollback "blue"
        fi
        ;;
    "cleanup")
        cleanup $2
        ;;
    "logs")
        version=${2:-$(get_current_version)}
        kubectl logs -l app=${APP_NAME},version=${version} -n $NAMESPACE --tail=100
        ;;
    *)
        echo "Usage: $0 {setup|deploy|status|switch|rollback|cleanup|logs} [version]"
        echo ""
        echo "Commands:"
        echo "  setup           - Initial setup with blue version"
        echo "  deploy <ver>    - Deploy specified version (blue|green)"
        echo "  status          - Show current deployment status"
        echo "  switch <ver>    - Switch traffic to specified version"
        echo "  rollback        - Rollback to previous version"
        echo "  cleanup <ver>   - Remove specified version deployment"
        echo "  logs [ver]      - Show logs for specified version"
        echo ""
        echo "Examples:"
        echo "  $0 setup"
        echo "  $0 deploy green"
        echo "  $0 status"
        echo "  $0 switch blue"
        echo "  $0 rollback"
        echo "  $0 cleanup green"
        exit 1
        ;;
esac